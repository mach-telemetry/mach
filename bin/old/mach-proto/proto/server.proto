syntax = "proto3";
option go_package = "github.com/fsolleza/mach-proto/golang";

package mach_rpc;

// The definition for serving global state
service TsdbService {
  //rpc AddSeries(AddSeriesRequest) returns (AddSeriesResponse) {}
  rpc Echo(EchoRequest) returns (EchoResponse) {}
  //rpc Map(MapRequest) returns (MapResponse) {}
  rpc EchoStream(stream EchoRequest) returns (stream EchoResponse) {}
  rpc PushStream(stream PushRequest) returns (stream PushResponse) {}
  rpc Read(ReadRequest) returns (ReadResponse) {}
}

message EchoRequest {
  string msg = 1;
}

message EchoResponse {
  string msg = 1;
}

//message MapRequest {
//  map<uint64, uint64> samples = 1;
//}
//
//message MapResponse {
//  map<uint64, bool> samples = 1;
//}
//message AddSeriesRequest {
//  enum ValueType {
//      U64 = 0;
//      F64 = 1;
//      Bytes = 2;
//  }
//  repeated ValueType types = 1;
//  map<string, string> tags = 2;
//}
//
//message AddSeriesResponse {
//  string writer_address = 1;
//  uint64 series_id = 2;
//}
//
//message GetSeriesReferenceRequest {
//  uint64 series_id = 1;
//}
//
//message GetSeriesReferenceResponse {
//  uint64 series_reference = 1;
//}

message Value {
  oneof ValueType {
    double f64 = 2;
    string str = 3;
  }
}

message Sample {
  uint64 id = 1;
  uint64 timestamp = 2;
  repeated Value values = 3;
}

message Samples {
  map<string, string> tags = 1;
  repeated Sample samples = 2;
}

message PushRequest {
  repeated Samples samples = 1;
}

message SampleResult {
  uint64 id = 1;
  bool result = 2;
}

message PushResponse {
  repeated SampleResult responses = 1;
}

// The definition for serving global state
//service WriterService {
//  rpc Echo(EchoRequest) returns (EchoResponse) {}
//  rpc GetSeriesReference(GetSeriesReferenceRequest) returns (GetSeriesReferenceResponse) {}
//  rpc MapStream(stream MapRequest) returns (stream MapResponse) {}
//  rpc PushStream(stream PushRequest) returns (stream PushResponse) {}
//  rpc Push(PushRequest) returns (PushResponse) {}
//}

message ReadRequest {
    string regex = 1;
}

message KafkaConfig {
    string bootstrap = 1;
    string topic = 2;
}

message FileConfig {
    string dir = 1;
    string file = 2;
}

message QueueConfig {
    oneof configs {
        KafkaConfig kafka = 1;
        FileConfig file = 2;
    }
}

message SeriesSnapshot {
    map<string, string> tags = 1;
    QueueConfig response_queue = 2;
    QueueConfig data_queue = 3;
    uint64 offset = 4;
}

message ReadResponse {
    repeated SeriesSnapshot snapshots = 1;
}
