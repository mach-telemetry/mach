// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TsdbServiceClient is the client API for TsdbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TsdbServiceClient interface {
	//rpc AddSeries(AddSeriesRequest) returns (AddSeriesResponse) {}
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	//rpc Map(MapRequest) returns (MapResponse) {}
	EchoStream(ctx context.Context, opts ...grpc.CallOption) (TsdbService_EchoStreamClient, error)
	PushStream(ctx context.Context, opts ...grpc.CallOption) (TsdbService_PushStreamClient, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
}

type tsdbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTsdbServiceClient(cc grpc.ClientConnInterface) TsdbServiceClient {
	return &tsdbServiceClient{cc}
}

func (c *tsdbServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/mach_rpc.TsdbService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsdbServiceClient) EchoStream(ctx context.Context, opts ...grpc.CallOption) (TsdbService_EchoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TsdbService_ServiceDesc.Streams[0], "/mach_rpc.TsdbService/EchoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tsdbServiceEchoStreamClient{stream}
	return x, nil
}

type TsdbService_EchoStreamClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type tsdbServiceEchoStreamClient struct {
	grpc.ClientStream
}

func (x *tsdbServiceEchoStreamClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tsdbServiceEchoStreamClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tsdbServiceClient) PushStream(ctx context.Context, opts ...grpc.CallOption) (TsdbService_PushStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TsdbService_ServiceDesc.Streams[1], "/mach_rpc.TsdbService/PushStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tsdbServicePushStreamClient{stream}
	return x, nil
}

type TsdbService_PushStreamClient interface {
	Send(*PushRequest) error
	Recv() (*PushResponse, error)
	grpc.ClientStream
}

type tsdbServicePushStreamClient struct {
	grpc.ClientStream
}

func (x *tsdbServicePushStreamClient) Send(m *PushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tsdbServicePushStreamClient) Recv() (*PushResponse, error) {
	m := new(PushResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tsdbServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/mach_rpc.TsdbService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TsdbServiceServer is the server API for TsdbService service.
// All implementations must embed UnimplementedTsdbServiceServer
// for forward compatibility
type TsdbServiceServer interface {
	//rpc AddSeries(AddSeriesRequest) returns (AddSeriesResponse) {}
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	//rpc Map(MapRequest) returns (MapResponse) {}
	EchoStream(TsdbService_EchoStreamServer) error
	PushStream(TsdbService_PushStreamServer) error
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	mustEmbedUnimplementedTsdbServiceServer()
}

// UnimplementedTsdbServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTsdbServiceServer struct {
}

func (UnimplementedTsdbServiceServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedTsdbServiceServer) EchoStream(TsdbService_EchoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoStream not implemented")
}
func (UnimplementedTsdbServiceServer) PushStream(TsdbService_PushStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PushStream not implemented")
}
func (UnimplementedTsdbServiceServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedTsdbServiceServer) mustEmbedUnimplementedTsdbServiceServer() {}

// UnsafeTsdbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TsdbServiceServer will
// result in compilation errors.
type UnsafeTsdbServiceServer interface {
	mustEmbedUnimplementedTsdbServiceServer()
}

func RegisterTsdbServiceServer(s grpc.ServiceRegistrar, srv TsdbServiceServer) {
	s.RegisterService(&TsdbService_ServiceDesc, srv)
}

func _TsdbService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsdbServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mach_rpc.TsdbService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsdbServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TsdbService_EchoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TsdbServiceServer).EchoStream(&tsdbServiceEchoStreamServer{stream})
}

type TsdbService_EchoStreamServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type tsdbServiceEchoStreamServer struct {
	grpc.ServerStream
}

func (x *tsdbServiceEchoStreamServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tsdbServiceEchoStreamServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TsdbService_PushStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TsdbServiceServer).PushStream(&tsdbServicePushStreamServer{stream})
}

type TsdbService_PushStreamServer interface {
	Send(*PushResponse) error
	Recv() (*PushRequest, error)
	grpc.ServerStream
}

type tsdbServicePushStreamServer struct {
	grpc.ServerStream
}

func (x *tsdbServicePushStreamServer) Send(m *PushResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tsdbServicePushStreamServer) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TsdbService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsdbServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mach_rpc.TsdbService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsdbServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TsdbService_ServiceDesc is the grpc.ServiceDesc for TsdbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TsdbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mach_rpc.TsdbService",
	HandlerType: (*TsdbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _TsdbService_Echo_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _TsdbService_Read_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoStream",
			Handler:       _TsdbService_EchoStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PushStream",
			Handler:       _TsdbService_PushStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
